#!/bin/sh

######################################################
# Personals alias and functions
######################################################

# return a message for bad commands
command_not_found_handle () {
  shuf -n1 /home/$USER/.config/scripts/command-not-found
}

# open and close encrypt folder
cryptfolder () {
  if [ "$1" = l ]
    then
      fusermount -u /home/$USER/Medias/cryptfolder
    else
      encfs /home/$USER/Medias/.cryptfolder/ /home/$USER/Medias/cryptfolder/
  fi
}

# Handy Extract Program
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar --extract --verbose --bzip2 --file=$1     ;;
          *.tar.gz)    tar --extract --verbose --gzip --file=$1      ;;
          *.bz2)       bunzip2 $1                                    ;;
          *.rar)       unrar --extract $1                            ;;
          *.gz)        gunzip $1                                     ;;
          *.tar)       tar --extract --verbose --file=$1             ;;
          *.tbz2)      tar --extract --verbose --bzip2 --file=$1     ;;
          *.tgz)       tar --extract --verbose --gzip --file=$1      ;;
          *.zip)       unzip $1                                      ;;
          *.Z)         uncompress $1                                 ;;
          *.7z)        7z --extract $1                               ;;
          *)           echo "'$1' cannot be extracted via extract"   ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# git commit for one file at the time
got () {
  if [ -z "$1" ]
    then
      echo "usage: got file message"
    else
      git add $1 && git commit --message="$*" && git push
  fi
}

# create folder and move to it
mkcd () {
  mkdir --parents "$1" ; cd -P "$1"
}

# display help
noob () {
  if [ -z "$1" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ] ; then
    echo "noob: noob [-lscge] COMMAND"
    echo ""
    echo "display help in a small format with quick examples."
    echo ""
    echo "┌──────────────────────────────────────────────────────────────┐"
    echo "│ you can use it with :                                        │"
    echo "│ noob -l         : list all the help                          │"
    echo "│ noob -s COMMAND : search a command in the help               │"
    echo "│ noob -g COMMAND : full search inside the help                │"
    echo "│ noob -c COMMAND : display help text mode                     │"
    echo "│ noob -e COMMAND : edit help                                  │"
    echo "│ noob COMMAND    : display help with markdown view            │"
    echo "└──────────────────────────────────────────────────────────────┘"
    elif [ "$1" = "-l" ] ; then
      ls /home/$USER/.config/noob
    elif [ "$1" = "-s" ] ; then
      ls /home/$USER/.config/noob | grep $2
    elif [ "$1" = "-g" ] ; then
      grep --ignore-case $2 /home/$USER/.config/noob/*
    elif [ "$1" = "-c" ] ; then
      less --quit-if-one-screen /home/$USER/.config/noob/$2.md
    elif [ "$1" = "-e" ] ; then
      nvim /home/$USER/.config/noob/$2.md
    else
      bash /home/$USER/.config/noob/.markdownviewer.sh /home/$USER/.config/noob/$1.md
  fi
}

# notes for later
notes () {
  if [ -z "$1" ]
    then
      echo "usage : notes your message"
    else
      echo "- $*" >> Unclear/notes.md
      echo "" >> Unclear/notes.md
  fi
}

# clean rename
renameclean () {
for i in $(ls)
  do
  mv $i $(echo $i | iconv --from-code=UTF-8 --to-code=ASCII//TRANSLIT)
done

prename 'y/A-Z\ /a-z-/' *
prename 's/\[//g' *
prename 's/[^a-z0-9-.]/-/g' *
prename 's/ryozanpaku-//g' *
prename 's/ajia-no-scantrad-//' *
prename 's/ajia-rs--//' *
prename 's/mns-tnt--//' *
prename 's/mns-rs--//' *
prename 's/rs--//' *
prename 's/mns--//' *
prename 's/monster-no-scantrad-//' *
prename 's/koneko-scantrad-//' *
}

# upgrade only security and bugfix
upgsec () {
dnf info-security
read -p "Press enter to continue"
for i in $(dnf --refresh --quiet updateinfo list update {bugfix,security} | awk 'NR>1 {print $3}')
  do
  sudo dnf update --assumeyes $i
done
sudo dnf autoremove --assumeyes
}

# save a url inside the bookmark file
addurl () {
sed -i -E 's/(.*AREMPLIRURL.*)/\1\n\1/' /home/$USER/.config/bookmarks/home.html
sed -i -E "52s+(.*)(AREMPLIRURL)(.*)(TEMPORAIRES)(.*)+\1"$1"\3"$2"\5+g" /home/$USER/.config/bookmarks/home.html
}

######################################################
# Alias
######################################################

# show files and folder
alias ll='ls -l --all --size --classify --human-readable --color=auto'
alias ls='ls --color=auto'
alias lu='ls -l --human-readable --reverse -u -t --color=auto'
alias rename='prename --verbose'
alias tmux='tmux attach'

# display text files
alias less='less --quit-if-one-screen --RAW-CONTROL-CHARS --LINE-NUMBERS --LONG-PROMPT'
alias csv='column --separator ',' --table'
alias vimdiff='nvim -d'
alias neovim='nvim -p'
alias vim='nvim -p'
alias vi='nvim -p'

# config for git bare dotfile on the /home/$USER/
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

# search
alias ddgr="ddgr --expand --num 9 --reg 'fr-fr'"

# zsh config
alias zshconfig="nvim -p /home/$USER/.oh-my-zsh /home/$USER/.zshrc"

# upgrade
alias upg='sudo dnf upgrade-minimal --refresh && flatpak update -y && notify-send " the upgrade is over."'

# backup
alias bup='rsync --recursive --links --perms --times --owner --group --devices --specials --verbose --human-readable --copy-dirlinks --delete-before --stats --ignore-errors --exclude={"Medias/","Transferts/","VirtualBox/",".cache/"} /home/$USER /run/media/$USER/RSYNC/ ; ls --recursive {"Medias/","Transferts/"} > /run/media/$USER/RSYNC/contenu.log ; notify-send " the backup is over."'
alias backup='rsync --recursive --links --perms --times --owner --group --devices --specials --verbose --human-readable --copy-dirlinks --delete-before --stats --ignore-errors --exclude={"Medias/","Transferts/","VirtualBox/",".cache/"} /home/$USER /mnt/Documents/ && find /mnt/Medias/ -name *.* > Unclear/path && notify-send " the backup is over."'
alias ecp='rsync --archive --human-readable --relative --progress'

# manage periphericals
alias connect='for i in {b..f} ; do udisksctl mount --block-device /dev/sd"$i"1; done && notify-send " usb mounted."'
alias disconnect='umount /run/media/$USER/* && for i in {b..f} ; do udisksctl power-off --block-device /dev/sd$i; done && notify-send " it is safe to eject."'
alias connectsec='sudo cryptsetup luksOpen /dev/sdb1 Backup && sudo mount /dev/mapper/Backup /mnt && notify-send " usb mounted."'

# music
alias radio='mpv --no-video "https://chai5she.cdn.dvmr.fr/fip-webradio1.mp3?ID=radiofrance"'
alias zen='mpv --no-video https://www.youtube.com/watch?v=qYnA9wWFHLI'
alias nature='mpv --no-video https://www.youtube.com/watch?v=eKFTSSKCzWA'

# download and encode content
alias musicdl='youtube-dl --output "%(title)s.%(ext)s" --extract-audio --audio-format mp3'

# weather in your city
alias meteo='curl --header "Accept-Language: fr" wttr.in/poitiers'

# clean cache
alias clean='bleachbit --clean "firefox.*" "chromium.*" google_chrome.cache system.tmp system.cache system.custom  && sudo dnf autoremove --assumeyes && sudo dnf clean all && notify-send " the cleanning is over."'
